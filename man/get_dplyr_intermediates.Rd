% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rcode_analyzer.R
\name{get_dplyr_intermediates}
\alias{get_dplyr_intermediates}
\title{Given a quoted dplyr chained code, return a list of intermediate outputs.}
\usage{
get_dplyr_intermediates(pipeline)
}
\arguments{
\item{pipeline}{quoted dplyr code

TODO-refactor: make the returned object an R6 class or a structure list so we can have one location
for modification}
}
\value{
list(
  intermediates = list(`tibble`),
  error = character(),
)
}
\description{
If there is an error, \code{get_dplyr_intermediates} will return outputs up to that
line, with an error message for the subsequent line at fault.
}
\details{
TODO-fix: change the evaluation strategy such that you store the result of the previous
operation and pipe that for .data on the next verb.
}
\examples{
require(tidyverse)
# multiple verbs
"diamonds \%>\%
  select(carat, cut, color, clarity, price) \%>\%
  group_by(color) \%>\%
  summarise(n = n(), price = mean(price)) \%>\%
  arrange(desc(color))" -> pipeline
quoted <- rlang::parse_expr(pipeline)
outputs <- get_dplyr_intermediates(quoted)

# Single verb
quoted <- rlang::parse_expr("select(diamonds, carat, cut, color, clarity, price)")
outputs <- get_dplyr_intermediates(quoted)

}
